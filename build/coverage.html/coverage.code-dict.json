{"/home/travis/build/npmtest/node-npmtest-gulp-tsc/test.js":"/* istanbul instrument in package npmtest_gulp_tsc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-tsc/lib.npmtest_gulp_tsc.js":"/* istanbul instrument in package npmtest_gulp_tsc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_tsc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_tsc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-tsc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-tsc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_tsc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_tsc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_tsc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_tsc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_tsc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_tsc.__dirname + '/lib.npmtest_gulp_tsc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-tsc/node_modules/gulp-tsc/index.js":"'use strict';\r\n\r\nvar Compiler = require('./lib/compiler');\r\nvar gutil = require('gulp-util');\r\nvar through = require('through2');\r\nvar async = require('async');\r\n\r\nmodule.exports = function (options) {\r\n  var sourceFiles = [];\r\n  var emitError   = (!options || options.emitError !== false);\r\n\r\n  function eachFile(file, encoding, done) {\r\n    sourceFiles.push(file);\r\n    done();\r\n  }\r\n\r\n  function endStream(done) {\r\n    if (sourceFiles.length === 0) {\r\n      return done();\r\n    }\r\n\r\n    var _this = this;\r\n    var compiler = new Compiler(sourceFiles, options);\r\n    compiler.on('stdout', function (line) {\r\n      gutil.log(gutil.colors.green('[tsc] >'), line);\r\n    });\r\n    compiler.on('stderr', function (line) {\r\n      gutil.log(gutil.colors.red('[tsc] >'), line);\r\n    });\r\n    compiler.on('error', function (err) {\r\n      gutil.log(gutil.colors.red('[tsc] Error: ' + err.toString()));\r\n      err.stack && console.log(gutil.colors.gray(err.stack));\r\n    });\r\n    compiler.on('data', function (file) {\r\n      _this.push(file);\r\n    });\r\n\r\n    async.waterfall([\r\n      function (next) {\r\n        compiler.getVersion(next);\r\n      },\r\n      function (version, next) {\r\n        gutil.log('Compiling TypeScript files using tsc version ' + version);\r\n        compiler.compile(next);\r\n      }\r\n    ], function (err) {\r\n      if (err) {\r\n        gutil.log(gutil.colors.red('Failed to compile TypeScript:', err));\r\n        if (emitError) {\r\n          Compiler.abortAll(function () {\r\n            _this.emit('error', new gutil.PluginError('gulp-tsc', 'Failed to compile: ' + (err.message || err)));\r\n            sourceFiles = [];\r\n            done();\r\n          });\r\n          return;\r\n        }\r\n      }\r\n      sourceFiles = [];\r\n      done();\r\n    });\r\n  }\r\n\r\n  return through.obj(eachFile, endStream);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-gulp-tsc/node_modules/gulp-tsc/lib/compiler.js":"'use strict';\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar util = require('util');\r\nvar _ = require('lodash');\r\nvar async = require('async');\r\nvar byline = require('byline');\r\nvar temp = require('temp');\r\nvar rimraf = require('rimraf');\r\nvar through = require('through2');\r\nvar fsSrc = require('vinyl-fs').src;\r\nvar EventEmitter = require('events').EventEmitter;\r\nvar versionCompare = require('node-version-compare');\r\nvar tsc = require(\"./tsc\");\r\nfunction Compiler(sourceFiles, options) {\r\n    EventEmitter.call(this);\r\n    this.sourceFiles = sourceFiles || [];\r\n    var defaultModule = options && (options.target === 'ES6' || options.target === 'ES2015') ? null : 'commonjs';\r\n    this.options = _.extend({\r\n        tscPath: null,\r\n        tscSearch: null,\r\n        module: defaultModule,\r\n        target: 'ES3',\r\n        out: null,\r\n        outDir: null,\r\n        baseUrl: null,\r\n        mapRoot: null,\r\n        sourceRoot: null,\r\n        allowbool: false,\r\n        allowimportmodule: false,\r\n        declaration: false,\r\n        noImplicitAny: false,\r\n        noResolve: false,\r\n        removeComments: false,\r\n        sourceMap: false,\r\n        moduleResolution: null,\r\n        suppressImplicitAnyIndexErrors: false,\r\n        tmpDir: '',\r\n        noLib: false,\r\n        keepTree: true,\r\n        noEmitOnError: false,\r\n        pathFilter: null,\r\n        safe: false,\r\n        emitDecoratorMetadata: false,\r\n        experimentalDecorators: false,\r\n        forceConsistentCasingInFileNames: false,\r\n        allowSyntheticDefaultImports: false,\r\n        noImplicitUseStrict: false,\r\n        stripInternal: false,\r\n        inlineSourceMap: false,\r\n        inlineSources: false,\r\n        isolatedModules: false,\r\n        listFiles: false,\r\n        project: null,\r\n        additionalTscParameters: []\r\n    }, options);\r\n    this.options.sourceMap = this.options.sourceMap || this.options.sourcemap;\r\n    delete this.options.sourcemap;\r\n    this.tscOptions = {\r\n        path: this.options.tscPath,\r\n        search: this.options.tscSearch\r\n    };\r\n    this.tempDestination = null;\r\n    this.tscArgumentsFile = null;\r\n    this.treeKeeperFile = null;\r\n}\r\nutil.inherits(Compiler, EventEmitter);\r\nCompiler.prototype.buildTscArguments = function (version) {\r\n    var args = [];\r\n    if (version === undefined || version === null) {\r\n        version = \"1.5\";\r\n    }\r\n    version = version.substring(0, 3);\r\n    var option = this.options;\r\n    if (!option.project) {\r\n        if (option.module) {\r\n            args.push('--module', option.module.toLowerCase());\r\n        }\r\n        if (option.target) {\r\n            args.push('--target', option.target.toUpperCase());\r\n        }\r\n    }\r\n    if (this.options.mapRoot)\r\n        args.push('--mapRoot', this.options.mapRoot);\r\n    if (this.options.sourceRoot)\r\n        args.push('--sourceRoot', this.options.sourceRoot);\r\n    if (this.options.baseUrl) {\r\n        args.push('--baseUrl', this.options.baseUrl);\r\n    }\r\n    if (this.options.allowbool)\r\n        args.push('--allowbool');\r\n    if (this.options.allowimportmodule)\r\n        args.push('--allowimportmodule');\r\n    if (this.options.suppressImplicitAnyIndexErrors\r\n        && (versionCompare(version, \"1.5\") >= 0))\r\n        args.push('--suppressImplicitAnyIndexErrors');\r\n    if (this.options.declaration)\r\n        args.push('--declaration');\r\n    if (this.options.noImplicitAny)\r\n        args.push('--noImplicitAny');\r\n    if (this.options.noResolve)\r\n        args.push('--noResolve');\r\n    if (this.options.removeComments)\r\n        args.push('--removeComments');\r\n    if (this.options.sourceMap)\r\n        args.push('--sourcemap');\r\n    if (this.options.noLib)\r\n        args.push('--noLib');\r\n    if (this.options.jsx && (versionCompare(version, \"1.6\") >= 0)) {\r\n        args.push('--jsx', this.options.jsx);\r\n    }\r\n    if (this.options.emitDecoratorMetadata)\r\n        args.push('--emitDecoratorMetadata');\r\n    if (this.options.experimentalDecorators)\r\n        args.push('--experimentalDecorators');\r\n    if (this.options.allowJs\r\n        && (versionCompare(version, \"1.8\") >= 0))\r\n        args.push('--allowJs');\r\n    if (this.options.reactNamespace\r\n        && (versionCompare(version, \"1.8\") >= 0))\r\n        args.push('--reactNamespace');\r\n    if (this.options.allowUnusedLabels\r\n        && (versionCompare(version, \"1.8\") >= 0))\r\n        args.push('--allowUnusedLabels');\r\n    if (this.options.allowUnreachableCode\r\n        && (versionCompare(version, \"1.8\") >= 0))\r\n        args.push('--allowUnreachableCode');\r\n    if (this.options.noImplicitReturns\r\n        && (versionCompare(version, \"1.8\") >= 0))\r\n        args.push('--noImplicitReturns');\r\n    if (this.options.noFallthroughCasesInSwitch\r\n        && (versionCompare(version, \"1.8\") >= 0))\r\n        args.push('--noFallthroughCasesInSwitch');\r\n    if (this.options.forceConsistentCasingInFileNames\r\n        && (versionCompare(version, \"1.8\") >= 0))\r\n        args.push('--forceConsistentCasingInFileNames');\r\n    if (this.options.allowSyntheticDefaultImports\r\n        && (versionCompare(version, \"1.8\") >= 0))\r\n        args.push('--allowSyntheticDefaultImports');\r\n    if (this.options.noImplicitUseStrict && (versionCompare(version, \"1.8\") >= 0)) {\r\n        args.push('--noImplicitUseStrict');\r\n    }\r\n    if (this.options.stripInternal && (versionCompare(version, \"1.8\") >= 0)) {\r\n        args.push('--stripInternal');\r\n    }\r\n    if (this.options.inlineSourceMap && (versionCompare(version, \"1.8\") >= 0)) {\r\n        args.push('--inlineSourceMap');\r\n    }\r\n    if (this.options.inlineSources && (versionCompare(version, \"1.8\") >= 0)) {\r\n        args.push('--inlineSources');\r\n    }\r\n    if (this.options.isolatedModules && (versionCompare(version, \"1.8\") >= 0)) {\r\n        args.push('--isolatedModules');\r\n    }\r\n    if (this.options.listFiles && (versionCompare(version, \"1.8\") >= 0)) {\r\n        args.push('--listFiles');\r\n    }\r\n    if (this.options.noEmitOnError && versionCompare(version, \"1.4\") >= 0) {\r\n        args.push('--noEmitOnError');\r\n    }\r\n    if (this.options.moduleResolution && versionCompare(version, \"1.6\") >= 0) {\r\n        args.push('--moduleResolution', this.options.moduleResolution);\r\n    }\r\n    if (option.lib && versionCompare(version, \"1.8\") >= 0) {\r\n        var param = option.lib.join(\",\");\r\n        args.push('--lib', param);\r\n    }\r\n    if (this.options.project && versionCompare(version, \"1.6\") >= 0) {\r\n        args.push('--project', this.options.project);\r\n    }\r\n    if (this.options.additionalTscParameters)\r\n        this.options.additionalTscParameters.forEach(function (param) { args.push(param); });\r\n    if (this.tempDestination) {\r\n        if (!(this.options.project && versionCompare(version, \"1.6\") >= 0)) {\r\n            args.push('--outDir', this.tempDestination);\r\n        }\r\n        if (this.options.out) {\r\n            args.push('--out', path.resolve(this.tempDestination, this.options.out));\r\n        }\r\n    }\r\n    else if (this.options.out) {\r\n        args.push('--out', this.options.out);\r\n    }\r\n    if (!(this.options.project && versionCompare(version, \"1.6\") >= 0)) {\r\n        this.sourceFiles.forEach(function (f) { args.push(f.path); });\r\n        if (this.treeKeeperFile) {\r\n            args.push(this.treeKeeperFile);\r\n        }\r\n    }\r\n    return args;\r\n};\r\nCompiler.prototype.getVersion = function (callback) {\r\n    return tsc.version(this.tscOptions, callback);\r\n};\r\nCompiler.prototype.compile = function (callback) {\r\n    var _this = this;\r\n    var checkAborted = this.checkAborted.bind(this);\r\n    this.emit('start');\r\n    Compiler._start(this);\r\n    async.waterfall([\r\n        checkAborted,\r\n        this.makeTempDestinationDir.bind(this),\r\n        checkAborted,\r\n        this.makeTreeKeeperFile.bind(this),\r\n        checkAborted,\r\n        this.prepareTscArgumentsFile.bind(this),\r\n        checkAborted,\r\n        this.runTsc.bind(this),\r\n        checkAborted\r\n    ], function (err) {\r\n        if (err && _this.options.safe) {\r\n            finish(err);\r\n        }\r\n        else {\r\n            _this.processOutputFiles(function (err2) {\r\n                finish(err || err2);\r\n            });\r\n        }\r\n    });\r\n    function finish(err) {\r\n        _this.cleanup();\r\n        _this.emit('end');\r\n        callback(err);\r\n    }\r\n};\r\nCompiler.prototype.checkAborted = function (callback) {\r\n    if (Compiler.isAborted()) {\r\n        callback(new Error('aborted'));\r\n    }\r\n    else {\r\n        callback(null);\r\n    }\r\n};\r\nCompiler.prototype.makeTempDestinationDir = function (callback) {\r\n    var _this = this;\r\n    temp.track();\r\n    temp.mkdir({ dir: path.resolve(process.cwd(), this.options.tmpDir), prefix: 'gulp-tsc-tmp-' }, function (err, dirPath) {\r\n        if (err)\r\n            return callback(err);\r\n        _this.tempDestination = dirPath;\r\n        callback(null);\r\n    });\r\n};\r\nCompiler.prototype.makeTreeKeeperFile = function (callback) {\r\n    if (!this.options.keepTree || this.options.out || this.sourceFiles.length === 0) {\r\n        return callback(null);\r\n    }\r\n    var _this = this;\r\n    temp.open({ dir: this.sourceFiles[0].base, prefix: '.gulp-tsc-tmp-', suffix: '.ts' }, function (err, file) {\r\n        if (err) {\r\n            return callback(new Error('Failed to create a temporary file on source directory: ' + (err.message || err) + ', ' +\r\n                'To skip creating it specify { keepTree: false } to your gulp-tsc.'));\r\n        }\r\n        _this.treeKeeperFile = file.path;\r\n        try {\r\n            fs.writeSync(file.fd, '// This is a temporary file by gulp-tsc for keeping directory tree.\\n');\r\n            fs.closeSync(file.fd);\r\n        }\r\n        catch (e) {\r\n            return callback(e);\r\n        }\r\n        callback(null);\r\n    });\r\n};\r\nCompiler.prototype.prepareTscArgumentsFile = function (callback) {\r\n    this.getVersion(function (error, version) {\r\n        var tscArguments = this.buildTscArguments(version);\r\n        var content = '\"' + tscArguments.join('\"\\n\"') + '\"';\r\n        this.tscArgumentsFile = path.join(this.tempDestination, 'tscArguments');\r\n        fs.writeFile(this.tscArgumentsFile, content, callback);\r\n    }.bind(this));\r\n};\r\nCompiler.prototype.runTsc = function (callback) {\r\n    var _this = this;\r\n    var proc = tsc.exec(['@' + this.tscArgumentsFile], this.tscOptions);\r\n    var stdout = byline(proc.stdout);\r\n    var stderr = byline(proc.stderr);\r\n    proc.on('exit', function (code) {\r\n        if (code !== 0) {\r\n            callback(new Error('tsc command has exited with code:' + code));\r\n        }\r\n        else {\r\n            callback(null);\r\n        }\r\n    });\r\n    proc.on('error', function (err) {\r\n        _this.emit('error', err);\r\n    });\r\n    stdout.on('data', function (chunk) {\r\n        _this.emit('stdout', chunk.toString('utf8'));\r\n    });\r\n    stderr.on('data', function (chunk) {\r\n        _this.emit('stderr', chunk.toString('utf8'));\r\n    });\r\n    return proc;\r\n};\r\nCompiler.prototype.processOutputFiles = function (callback) {\r\n    var _this = this;\r\n    var options = { cwd: this.tempDestination, cwdbase: true };\r\n    var patterns = ['**/*{.js,.js.map,.d.ts}'];\r\n    if (this.treeKeeperFile) {\r\n        patterns.push('!**/' + path.basename(this.treeKeeperFile, '.ts') + '.*');\r\n    }\r\n    var stream = fsSrc(patterns, options);\r\n    stream = stream.pipe(this.fixOutputFilePath());\r\n    if (this.options.sourceMap && !this.options.sourceRoot) {\r\n        stream = stream.pipe(this.fixSourcemapPath());\r\n    }\r\n    if (this.options.declaration && this.options.outDir) {\r\n        stream = stream.pipe(this.fixReferencePath());\r\n    }\r\n    stream.on('data', function (file) {\r\n        _this.emit('data', file);\r\n    });\r\n    stream.on('error', function (err) {\r\n        callback(err);\r\n    });\r\n    stream.on('end', function () {\r\n        callback();\r\n    });\r\n};\r\nCompiler.prototype.fixOutputFilePath = function () {\r\n    var filter = this.options.pathFilter && this.filterOutput.bind(this);\r\n    var outDir;\r\n    if (this.options.outDir) {\r\n        outDir = path.resolve(process.cwd(), this.options.outDir);\r\n    }\r\n    else {\r\n        outDir = this.tempDestination;\r\n    }\r\n    return through.obj(function (file, encoding, done) {\r\n        file.originalPath = file.path;\r\n        file.path = path.resolve(outDir, file.relative);\r\n        file.cwd = file.base = outDir;\r\n        if (filter) {\r\n            try {\r\n                file = filter(file);\r\n            }\r\n            catch (e) {\r\n                return done(e);\r\n            }\r\n        }\r\n        if (file)\r\n            this.push(file);\r\n        done();\r\n    });\r\n};\r\nCompiler.prototype.filterOutput = function (file) {\r\n    if (!this.options.pathFilter)\r\n        return file;\r\n    var filter = this.options.pathFilter;\r\n    if (_.isFunction(filter)) {\r\n        var ret = filter(file.relative, file);\r\n        if (ret === true || _.isUndefined(ret)) {\r\n            return file;\r\n        }\r\n        else if (ret === false) {\r\n            return null;\r\n        }\r\n        else if (_.isString(ret)) {\r\n            file.path = path.resolve(file.base, ret);\r\n            return file;\r\n        }\r\n        else if (_.isObject(ret) && ret.path) {\r\n            return ret;\r\n        }\r\n        else {\r\n            throw new Error('Unknown return value from pathFilter function');\r\n        }\r\n    }\r\n    else if (_.isPlainObject(filter)) {\r\n        _.forOwn(filter, function (val, key) {\r\n            if (_.isString(key) && _.isString(val)) {\r\n                var src = path.normalize(key) + path.sep;\r\n                if (file.relative.substr(0, src.length) === src) {\r\n                    file.path = path.resolve(file.base, val, file.relative.substr(src.length) || '.');\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        return file;\r\n    }\r\n    else {\r\n        throw new Error('Unknown type for pathFilter');\r\n    }\r\n};\r\nCompiler.prototype.fixSourcemapPath = function () {\r\n    return through.obj(function (file, encoding, done) {\r\n        if (!file.isBuffer() || !/\\.js\\.map/.test(file.path)) {\r\n            this.push(file);\r\n            return done();\r\n        }\r\n        var map = JSON.parse(file.contents);\r\n        if (map['sources'] && map['sources'].length > 0) {\r\n            map['sources'] = map['sources'].map(function (sourcePath) {\r\n                sourcePath = path.resolve(path.dirname(file.originalPath), sourcePath);\r\n                sourcePath = path.relative(path.dirname(file.path), sourcePath);\r\n                if (path.sep == '\\\\')\r\n                    sourcePath = sourcePath.replace(/\\\\/g, '/');\r\n                return sourcePath;\r\n            });\r\n            file.contents = new Buffer(JSON.stringify(map));\r\n        }\r\n        this.push(file);\r\n        done();\r\n    });\r\n};\r\nCompiler.prototype.fixReferencePath = function () {\r\n    return through.obj(function (file, encoding, done) {\r\n        if (!file.isBuffer() || !/\\.d\\.ts/.test(file.path)) {\r\n            this.push(file);\r\n            return done();\r\n        }\r\n        var newContent = file.contents.toString().replace(/(\\/\\/\\/\\s*<reference\\s*path\\s*=\\s*)([\"'])(.+?)\\2/g, function (entire, prefix, quote, refPath) {\r\n            refPath = path.resolve(path.dirname(file.originalPath), refPath);\r\n            refPath = path.relative(path.dirname(file.path), refPath);\r\n            if (path.sep == '\\\\')\r\n                refPath = refPath.replace(/\\\\/g, '/');\r\n            return prefix + quote + refPath + quote;\r\n        });\r\n        file.contents = new Buffer(newContent);\r\n        this.push(file);\r\n        done();\r\n    });\r\n};\r\nCompiler.prototype.cleanup = function () {\r\n    try {\r\n        rimraf.sync(this.tempDestination);\r\n    }\r\n    catch (e) { }\r\n    try {\r\n        fs.unlinkSync(this.treeKeeperFile);\r\n    }\r\n    catch (e) { }\r\n};\r\nCompiler.running = 0;\r\nCompiler.aborted = false;\r\nCompiler.abortCallbacks = [];\r\nCompiler.abortAll = function (callback) {\r\n    Compiler.aborted = true;\r\n    callback && Compiler.abortCallbacks.push(callback);\r\n    if (Compiler.running == 0) {\r\n        Compiler._allAborted();\r\n    }\r\n};\r\nCompiler.isAborted = function () {\r\n    return Compiler.aborted;\r\n};\r\nCompiler._start = function (compiler) {\r\n    Compiler.running++;\r\n    compiler.once('end', function () {\r\n        Compiler.running--;\r\n        if (Compiler.running == 0 && Compiler.aborted) {\r\n            Compiler._allAborted();\r\n        }\r\n    });\r\n};\r\nCompiler._allAborted = function () {\r\n    var callbacks = Compiler.abortCallbacks;\r\n    Compiler.aborted = false;\r\n    Compiler.abortCallbacks = [];\r\n    callbacks.forEach(function (fn) {\r\n        fn.call(null);\r\n    });\r\n};\r\nmodule.exports = Compiler;\r\n","/home/travis/build/npmtest/node-npmtest-gulp-tsc/node_modules/gulp-tsc/lib/tsc.js":"/// <reference path=\"../typings/node/node.d.ts\"/>\r\n'use strict';\r\nvar path = require('path');\r\nvar fs = require('fs');\r\nvar child_process = require('child_process');\r\nvar resolve = require('resolve');\r\nvar which = require('which');\r\nvar shellescape_1 = require(\"./shellescape\");\r\nfunction exec(args, options, callback) {\r\n    if (!callback && typeof options === 'function') {\r\n        callback = options;\r\n        options = {};\r\n    }\r\n    if (!options && typeof args === 'function') {\r\n        callback = args;\r\n        args = null;\r\n    }\r\n    options = options || {};\r\n    var tscPath = options.path;\r\n    if (!tscPath) {\r\n        try {\r\n            tscPath = find(options.search);\r\n        }\r\n        catch (e) {\r\n            return callback && callback(e);\r\n        }\r\n    }\r\n    var exe = /(\\.exe|\\.cmd)$/i.test(tscPath);\r\n    var command = shellescape_1.shellescape(exe ? [tscPath] : [process.execPath, tscPath]);\r\n    if (args && args.length > 0) {\r\n        command += ' ' + (Array.isArray(args) ? shellescape_1.shellescape(args) : args);\r\n    }\r\n    return child_process.exec(command, options, callback);\r\n}\r\nexports.exec = exec;\r\nfunction versionParser(callback) {\r\n    return function (stdout, stderr) {\r\n        if (!stdout) {\r\n            callback(null, null);\r\n            return;\r\n        }\r\n        var versionMatch = stdout.match(/Version (\\d+\\.\\d+\\.\\d+((\\.\\d+)|(-alpha))?)/);\r\n        if (versionMatch.length > 1) {\r\n            callback(null, versionMatch[1]);\r\n            return;\r\n        }\r\n        callback(null, null);\r\n    };\r\n}\r\nexports.versionParser = versionParser;\r\nfunction version(options, callback) {\r\n    if (!callback && typeof options === 'function') {\r\n        callback = options;\r\n        options = {};\r\n    }\r\n    return exec('-v', options, function (err, stdout, stderr) {\r\n        if (err) {\r\n            return callback(err, null);\r\n        }\r\n        var parser = versionParser(callback);\r\n        parser(stdout, stderr);\r\n    });\r\n}\r\nexports.version = version;\r\nfunction find(places) {\r\n    places = places || ['cwd', 'bundle', 'shell'];\r\n    for (var i = 0; i < places.length; i++) {\r\n        var fn = searchFunctions[places[i]];\r\n        if (!fn) {\r\n            throw new Error('Unknown search place: ' + places[i]);\r\n        }\r\n        var found = fn();\r\n        if (found) {\r\n            return found;\r\n        }\r\n    }\r\n    throw new Error('Can\\'t locate `tsc` command');\r\n}\r\nexports.find = find;\r\nvar searchFunctions = {\r\n    cwd: function () {\r\n        try {\r\n            var tpath = resolve.sync('typescript', { basedir: process.cwd() });\r\n            var tscPath = path.resolve(path.dirname(tpath), 'tsc');\r\n            return fs.existsSync(tscPath) ? tscPath : null;\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    },\r\n    shell: function () {\r\n        try {\r\n            return which.sync('tsc');\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    },\r\n    bundle: function () {\r\n        try {\r\n            return path.resolve(require.resolve('typescript'), '../tsc');\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-gulp-tsc/node_modules/gulp-tsc/lib/shellescape.js":"'use strict';\r\nfunction shellescape(arg) {\r\n    if (Array.isArray(arg)) {\r\n        return arg.map(shellescape).join(\" \");\r\n    }\r\n    else {\r\n        if (/[\"'` \\\\$]/.test(arg)) {\r\n            return '\"' + arg.replace(/([\"`\\\\$])/g, '\\\\$1') + '\"';\r\n        }\r\n        else {\r\n            return '\"' + arg + '\"';\r\n        }\r\n    }\r\n}\r\nexports.shellescape = shellescape;\r\n"}